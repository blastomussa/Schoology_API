#!/usr/bin/env python3
# Author: Blastomussa
# Date 8/17/2021
# Schoology REST API app request definitions. All methods return a json dict
# Uses the two-legged OAuth1.0 method of authentication and is best used in
# server-to-server applications. Key and secret can be generated by system admin
# by going to https://www.schoology.com/api or [customdomain].schoology.com/api
# These methods can be imported to another .py file by placing this file in the # same directory and import using: from api_requests import *
import json
import time
import oauth2
import requests
import configparser
import urllib.parse
import urllib.request

# ----------->> ADD NO CONNECTION ERROR HANDLING
# Get API key and secret from config file
try:
    config = configparser.ConfigParser()
    config.read('config.ini')
    KEY = config['SCHOOLOGY_CLIENT']['API_KEY']
    SECRET = config['SCHOOLOGY_CLIENT']['SECRET']
except configparser.Error:
    print("Configuration Error...config.ini not found")
    exit()
except KeyError:
    print("Configuration Error...config not found")
    exit()


# create OAuth1.0 header to authorize API requests; two-legged server-to-server
# returns authorized url that can be used with requests library
def authorize(url,method):
    # specified by Schoology API Docs
    header = {
        'realm': "Schoology API",
        'oauth_consumer_key': KEY,
        'oauth_token': "",
        'oauth_nonce': oauth2.generate_nonce(),
        'oauth_timestamp': int(time.time()),
        'oauth_signature_method': "PLAINTEXT",
        'oauth_version': "1.0"
    }

    # create signed request
    consumer = oauth2.Consumer(key=KEY,secret=SECRET)
    r = oauth2.Request(method=method, url=url, parameters=header)
    signature_method = oauth2.SignatureMethod_PLAINTEXT()
    r.sign_request(signature_method, consumer, None)

    # get and return authorized url
    signed_url = r.to_url()
    return signed_url


# make GET request, convert response to json and return json
def get_request(api_call):
    method = "GET"

    # get authorized url for requests call
    signed_url = authorize(api_call,method)

    # make request and read data
    d = requests.get(signed_url)
    data = d.text

    # 404 Error Handling
    not_found = "404 Not Found"
    if(not_found in data):
        json_data = not_found
    else:
        json_data = json.loads(data)
    return json_data


# make POST request, convert response to json and return json
def post_request(api_call,dict):
    method = "POST"

    # get authorized url for requests call
    signed_url = authorize(api_call,method)

    # make request and read data
    d = requests.post(signed_url,json=dict)
    data = d.text

    # create json dictionary and return
    json_data = json.loads(data)
    return json_data


# make PUT request, convert response to json and return json
def put_request(api_call,dict):
    method = "PUT"

    # get authorized url for requests call
    signed_url = authorize(api_call,method)

    # make request and read data
    d = requests.put(signed_url,data=dict)
    data = d.text

    # create json dictionary and return
    if(data == ""):
        json_data = data
    else:
        json_data = json.loads(data)
    return json_data


# make DELETE request, convert response to json and return json
def delete_request(api_call):
    method = "DELETE"

    # get authorized url for requests call
    signed_url = authorize(api_call,method)

    # make request and read data
    d = requests.delete(signed_url)
    data = d.text

    # create json dictionary and return
    not_found = "404 Not Found"
    if(data == ""):
        json_data = "Successfully Deleted User"
    elif(not_found in data):
        json_data = "404 User Not Found"
    else:
        json_data = json.loads(data)
    return json_data
